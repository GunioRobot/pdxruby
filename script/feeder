#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'net/http'
require 'simple-rss'
require 'rexml/text'

OPTIONS = {
  :environment => "development",
  :wait_time => 300
}

ARGV.options do |opts|
  opts.banner = "Usage: ruby #{File.basename($0)} [options]"
  
  opts.separator ''
  
  opts.on('-e', '--environment=name', String,
    'Specifies the environment to run this server under (test/development/production).',
    'Default: development') { |OPTIONS[:environment]| }
    
  opts.on('-w', '--wait-time=seconds', Integer,
    'Specifies the number of seconds to wait between feed refreshes',
    'Default: 300') { |OPTIONS[:wait_time]| }
end

def unescape(text)
  text =~ /&lt;.*&gt;/ ? REXML::Text.unnormalize(text) : text
end

ENV["RAILS_ENV"] = OPTIONS[:environment]
require File.dirname(__FILE__) + '/../config/environment'

while (true)
  members = Member.find(:all, "feed_url <> '' and feed_url is not null")
  STDOUT.puts "Beginning feed refresh for #{members.size} URL(s)..."
  
  members.each do |member|
    begin
      next unless member.feed_url =~ /\w+/
      
      uri = URI.parse(member.feed_url)
      data = Net::HTTP.get(uri)
      rss = SimpleRSS.parse(data)
      
      puts "Saving #{rss.items.size} items for member #{member.name}..."
      
      Article.find(:all, :conditions => ['member_id = ?', member.id]).each {|a| a.destroy}
      
      rss.items.each do |item|
        article = Article.new
        article.member = member
        article.modified_at = (item.modified || Time.now)
        article.title = unescape(item.title)
        article.link = item.link
        article.content = unescape(item.summary || item.content)
        article.save
      end
    rescue Exception => e
      STDERR.puts("Error loading #{member.feed_url}: '#{e}'")
      next
    end
  end
  
  wait = OPTIONS[:wait_time]
  STDOUT.puts("Done. Sleeping for #{wait} seconds...")
  sleep wait
end
